package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"
	"intent-service/domain/entities"
	"intent-service/graph/model"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

// CreateIntent is the resolver for the createIntent field.
func (r *mutationResolver) CreateIntent(ctx context.Context, input model.NewIntent) (*model.Intent, error) {
	intentDto := entities.IntentDto{
		User_id: *input.UserID,
	}

	for _, item := range input.Items {
		intentProductDto := entities.NewIntentProductDto{
			Title:       *item.Title,
			Price:       *item.Price,
			Category:    *item.Category,
			Image:       *item.Image,
			Description: *item.Description,
		}
		intentProductDto.ID = primitive.NewObjectID()

		intentProduct, err := entities.NewIntentProduct(intentProductDto)

		if err != nil {
			return nil, err
		}

		intentDto.Itens = append(intentDto.Itens, *intentProduct)
	}

	fmt.Println("Dto and itens", intentDto, intentDto.Itens)

	intent, err := entities.NewIntent(intentDto)

	if err != nil {
		return nil, err
	}

	_, err = r.Service.Create(intent)

	if err != nil {
		return nil, err
	}

	intent_model := model.Intent{
		Items:  []*model.IntentProduct{},
		UserID: input.UserID,
	}

	return &intent_model, nil
}

// ListIntents is the resolver for the listIntents field.
func (r *queryResolver) ListIntents(ctx context.Context) ([]*model.Intent, error) {
	panic(fmt.Errorf("not implemented: ListIntents - listIntents"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
